"use strict";var atcCS = angular.module('atcCS',['ngCookies']);
atcCS.config(['$httpProvider', function ($httpProvider) { $httpProvider.defaults.headers.common = {'Accept' : "application/json, text/plain"}; $httpProvider.defaults.headers.common = {'Access-Control-Allow-Origin': 'http://rest.atc58.bit'}; $httpProvider.defaults.headers.common = {'Content-Type' : "application/json;charset=utf-8"}; $httpProvider.defaults.useXDomain = true; $httpProvider.interceptors.push('atcServerToken'); }]);
atcCS.controller( 'searchControl', ['$scope','$filter', 'User', function($scope,$filter,$user) { $scope.markup = null; $scope.searchListLodaded = function listLoaded(){ $("body").popover({ container: "body", selector: "[data-toggle=popover]" }); }; }]);atcCS.controller( 'headControl',['$scope','User', function($scope,$user) { $scope.show = !$user.isLogin; $scope.login = { name: $user.name, password: $user.password, remember: true }; $scope.onLogin = function(){ $user.login($scope.login.name,$scope.login.password,$scope.login.remember); $scope.show = !$user.isLogin; return false; }; $scope.$watch( function(){ return $user.isLogin }, function( newVal ){ $scope.show = !newVal; } ); }]);
atcCS.directive('modal', function (){ return { require: "ngModel", restrict: 'E', replace: true, transclude: true, templateUrl: '/modal-window.html', scope: true, link: function link(scope, element, attrs, modelCtrl){ scope.title = attrs.title; scope.$watch(function(){ return modelCtrl.$viewValue;}, function( newVal ){ if( newVal === true ){ $(element).modal({ backdrop: false, show: true }); } else { $(element).modal('hide'); } }); } };} );atcCS.directive('inject', function(){ return { link: function($scope, $element, $attrs, controller, $transclude) { if (!$transclude) { throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element)); } var innerScope = $scope.$new(); $transclude(innerScope, function(clone) { $element.empty(); $element.append(clone); }); } };});/*atcCS.directive('ajaxButton', ['$http','$compile', function ($http,$compile) { return { restrict: 'E', replace: true, transclude: true, template: '<button class="ajax-button" ng-transclude ng-click="toggle()"> </button>', scope: { ngModel : "=", url : "@", data : "@", title : "@", name : "@", }, controller: function controller($scope, $element, $attrs){ $scope.hide = function hide(){ $scope.window.addClass('hidden'); }; $scope.show = function show(){ var button = angular.element($element); var offset = button.offset(); $scope.window.css('left', offset.left + button.outerWidth()); $scope.window.css('top', offset.top); $scope.window.removeClass('hidden'); }; $scope.toggle = function toggle(){ $scope.window = angular.element($('body').find("#" + $scope.windowName)[0]); if( !$scope.window ){ return; } var show = !$scope.window.hasClass('hidden'); var title = $scope.window.find("h3.ajax-button-header"); var context = $scope.window.find("div.ajax-button-context"); context.html("asdf"); title.html($scope.title); title.html($scope.data + "asd"); if( !show ) { $scope.show(); } else { $scope.hide(); } }; }, link: function link($scope, $element, $attrs, modelCtrl){ $scope.visible = false; $scope.loaded = false; $scope.data = ""; $scope.templateWindow = '<div class="ajax-button-helper hidden"><div class="pointer"></div><h3 class="ajax-button-header"></h3><div class="ajax-button-context"></div></div>'; $scope.windowName = $scope.name + '-ajax-button-window'; var windowAlrearyAppend = $('body').find("#" + $scope.windowName).length !== 0; if( !windowAlrearyAppend ){ var root = angular.element('body'); var window = angular.element($scope.templateWindow); window.attr('id',$scope.windowName); root.append(window); } $scope.$watch('visible',function(newVal){ if( newVal && !$scope.loaded ){ } return newVal; }); } };}]);*/
atcCS.directive('scheckbox', function (){ return { require: "ngModel", priority: 0, terminal: false, restrict: 'E', replace: true, template: [ '<div class="scheckbox">', ' <label for="{{name}}_id">{{label}}</label>', ' <span class="scb-box glyphicon glyphicon-unchecked" ng-click="toggle()"></span>', ' <input type="checkbox" name="{{name}}" id="{{name}}_id" ng-model="state" />', '</div>'].join(''), transclude: 'element', scope: { value: "@", label: "@", name: "@" }, controller: function controller($scope, $element, $attrs, $transclude){ $scope.state = true; $scope.box = $($element).find('span.scb-box'); $scope.toggle = function toggle(){ $scope.state = ! $scope.state; }; $scope.change = function change(){ if( $scope.state){ $($scope.box).removeClass('glyphicon-unchecked'); $($scope.box).addClass('glyphicon-check'); } else { $($scope.box).addClass('glyphicon-unchecked'); $($scope.box).removeClass('glyphicon-check'); } }; }, link: function link(scope, element, attrs, modelCtrl){ scope.$watch( function() { return modelCtrl.$viewValue; }, function(newVal){ scope.state = newVal; return newVal; }); scope.$watch( function(scope) { return scope.state; }, function(newVal){ modelCtrl.$setViewValue(newVal); scope.change(); return newVal; }); } };} );
atcCS.directive('inputhelper', ['$compile','$parse','$http','$filter', function ($compile,$parse,$http,$filter){ return { require: "ngModel", restrict: 'E', replace: true, transclude: true, templateUrl: '/input-help.html', scope: { ngModel : "=", placeholder : "@", url : "@", startLength : "@", subFilter : "@", inputClass : "@", onLoad : "=" }, controller: function controller($scope, $element, $attrs, $transclude,$filter){ $scope.change = function inputChange(){ var value = $scope.data.inputValue; var url = $scope.url; var req = { method: 'GET', url: url, responseType: 'json', params: { params: value } }; if( value.length < $scope.startLength*1){ return; } $http(req).then( function success(response){ var list = response && response.data || {}; if( list && list.count ){ $scope.count = list.count; delete list.count; } $scope.data.filters = null; if( (!list) || (Object.keys(list).length <= 1) || (list.length === 0) ){ $scope.visible = false; } else { $scope.visible = true; } $scope.list = list; $scope.fullList = list; if( $scope.onLoad instanceof Function ){ $scope.onLoad(); } },function error(response){ $scope.list = {}; $scope.fullList = {}; $scope.count = 0; }); }; $scope.subfilter = function subfilter(){ $scope.list = $filter($scope.subFilter)($scope.fullList,$scope.data.filters); }; $scope.toggle = function onToggle(){ if( !$scope.visible && ($scope.count === 0)){ return; } $scope.visible = !$scope.visible; }; }, link: function link($scope, $element, $attrs, modelCtrl){ $scope.data = { inputValue : "", filters : "" }; $scope.list = {"0":{"id":"1969592","article":"123444","supply":"SCHLIECKMANN\n","descrRU":"Решетка вентилятора","descrEN":"Решетка вентилятора"},"1":{"id":"4520540","article":"12344","supply":"FARE\n","descrRU":"Шланг радиатора\n","descrEN":"Шланг радиатора\n"},"2":{"id":"170764","article":"123440601","supply":"REINZ\n","descrRU":"Комплект прокладок","descrEN":"Комплект прокладок"},"3":{"id":"1969591","article":"123443","supply":"SCHLIECKMANN\n","descrRU":"Решетка вентилятора","descrEN":"Решетка вентилятора"},"4":{"id":"1302189","article":"123440","supply":"ERNST\n","descrRU":"Труба выхлопного газа\n","descrEN":"Труба выхлопного газа\n"},"5":{"id":"539189","article":"1234431396","supply":"BOSCH\n","descrRU":"Электропроводка; Электропроводка\n","descrEN":"Электропроводка; Электропроводка\n"},"6":{"id":"1443113","article":"123449","supply":"SACHS\n","descrRU":"Амортизатор\n","descrEN":"Амортизатор\n"},"7":{"id":"2407016","article":"12344100002","supply":"MEYLE\n","descrRU":"Подвеска","descrEN":"Подвеска"},"8":{"id":"1969593","article":"123445","supply":"SCHLIECKMANN\n","descrRU":"Решетка вентилятора","descrEN":"Решетка вентилятора"},"9":{"id":"170766","article":"123443801","supply":"REINZ\n","descrRU":"Комплект прокладок","descrEN":"Комплект прокладок"},"10":{"id":"539188","article":"1234431293","supply":"BOSCH\n","descrRU":"Регулятор генератора\n","descrEN":"Регулятор генератора\n"},"11":{"id":"170767","article":"123443901","supply":"REINZ\n","descrRU":"Комплект прокладок","descrEN":"Комплект прокладок"},"12":{"id":"539191","article":"1234477022","supply":"BOSCH\n","descrRU":"Соединитель проводов\n","descrEN":"Соединитель проводов\n"},"13":{"id":"539190","article":"1234477018","supply":"BOSCH\n","descrRU":"Соединитель проводов\n","descrEN":"Соединитель проводов\n"},"14":{"id":"1099497","article":"12344911","supply":"EBERSPÄCHER\n","descrRU":"Соединительные элементы","descrEN":"Соединительные элементы"},"15":{"id":"24695","article":"12344901","supply":"EBERSPÄCHER\n","descrRU":"Прокладка","descrEN":"Прокладка"},"16":{"id":"3691103","article":"12344R","supply":"SERCORE\n","descrRU":"Приводной вал\n","descrEN":"Приводной вал\n"},"17":{"id":"2407018","article":"12344710003","supply":"MEYLE\n","descrRU":"Гидравлический насос","descrEN":"Гидравлический насос"},"18":{"id":"539187","article":"1234431256","supply":"BOSCH\n","descrRU":"Конденсатор","descrEN":"Конденсатор"},"19":{"id":"2407017","article":"12344710001","supply":"MEYLE\n","descrRU":"Гидравлический насос","descrEN":"Гидравлический насос"},"20":{"id":"539192","article":"1234485025","supply":"BOSCH\n","descrRU":"Штекерная гильза","descrEN":"Штекерная гильза"},"21":{"id":"170765","article":"123443701","supply":"REINZ\n","descrRU":"Комплект прокладок","descrEN":"Комплект прокладок"},"22":{"id":"1374164","article":"1234477014","supply":"BOSCH\n","descrRU":"Соединитель проводов\n","descrEN":"Соединитель проводов\n"},"23":{"id":"1443112","article":"123441","supply":"SACHS\n","descrRU":"Амортизатор\n","descrEN":"Амортизатор\n"}}; $scope.fullList = {}; $scope.count = 10; $scope.visible = false; } };}]);
/* * Измененное поле ввода текста */atcCS.directive('sinput', function (){ return { require: "ngModel", priority: 0, terminal: false, restrict: 'E', replace: true, template: '<div class="sinput"><input class="sinput" placeholder="{{placeholder}}" value="{{value}}" name="{{name}}" ng-value="value" ng-model="model" /></div>', transclude: true, scope: { placeholder: "@", value: "@", name: "@", submit: "@", submitFunction: "&" }, controller: function controller($scope, $element, $attrs, $transclude){ $scope.model = null; var onFocus = function(){ $($element).addClass('active'); }; var onBlur = function(){ $($element).removeClass('active'); }; var onKeyPress = function(event){ if( event.charCode === 13 ){ $scope.submitFunction(event); } }; $($element).children('input').on('focus',onFocus); $($element).children('input').on('blur',onBlur); if( $scope.submit ){ $($element).children('input').on('keypress',onKeyPress); } }, /*compile: function compile(templateElement, templateAttrs){ },*/ link: function link(scope, element, attrs, modelCtrl){ scope.$watch( function() { return modelCtrl.$viewValue; }, function(newVal){ scope.model = newVal; return newVal; }); scope.$watch( function(scope) { return scope.model; }, function(newVal){ modelCtrl.$setViewValue(newVal); return newVal; }); } };} );
atcCS.directive('notificationItems', ['Notification', function ($notify){ return { priority: 0, terminal: false, restrict: 'E', replace: true, template: "<ul></ul>", transclude: false, scope: false, controller: function controller($scope, $element, $attrs, $transclude){ $scope.itemShow = function(){ var index = $(this).attr('index'); var item = $notify.list[index]; item.new = 0; $(this).children('button').children('span').remove(); }; }, link: function link(scope, element, attrs, modelCtrl){ for(var i = 0; i< $notify.list.length; i++){ var item = $notify.list[i]; var row = $("<li></li>"); var button = $('<button></button>'); item.text.replace(/\"/,''); row.addClass('notification-item'); row.addClass(item.class); row.attr('index',i); $(row).append(button); button.attr('type','button'); button.attr('data-toggle','popover'); button.attr('title','Просмотреть'); button.attr('data-content',item.text); button.addClass('btn'); button.addClass(item.style); button.text(item.head); if( item.new ){ button.prepend( '<span class="glyphicon glyphicon-flag pull-left text-muted"></span>'); } $(element).prepend(row); $(row).on('show.bs.popover',scope.itemShow); } } };}] );
atcCS.directive('searchLine', ['User','searchControl', function ($user,$searchCtrl){ return { priority: 0, terminal: false, restrict: 'E', replace: true, transclude: true, templateUrl: '/search-line.html', scope: {}, controller: function controller($scope, $element, $attrs, $transclude){ $searchCtrl.pushTag('sup','NISSAN',[1,2,3,4]); $searchCtrl.pushTag('brand','GNK',[1,2,3,4]); $searchCtrl.pushTag('model','AD',[1,2,3,4]); $searchCtrl.pushTag('part','256G3','256G3'); $searchCtrl.init($($element), function textValid(text,byEnter){ console.log(text); $user.parseSearch(text,{}).then( function success(answer){ console.log(answer); }, function error(answer){ console.log("Error", answer); }); }); $searchCtrl.updateTags(); }, compile: function compile(templateElement, templateAttrs){ }, link: function link(scope, element, attrs, modelCtrl){ } };}] );
atcCS.directive('window', function (){ return { priority: 0, terminal: false, restrict: 'E', replace: true, transclude: true, templateUrl: '/window.html', scope: { header: "@" }, controller: function controller($scope, $element, $attrs, $transclude){ }, compile: function compile(templateElement, templateAttrs){ $(templateElement).children('div.header').html("<span>" + templateAttrs.header + "</span>"); }, link: function link(scope, element, attrs, modelCtrl){ } };} );
 atcCS.factory('atcServerToken', ['$q', '$rootScope', '$injector', function ($q, $rootScope, $injector) { var interceptor = { request: function(config){ if( config.params ){ config.params._format = 'json'; config.responseType = 'json'; } if( $rootScope.user.isLogin ){ config.headers.Authorization = 'Bearer ' + $rootScope.user.accessToken; } return config; }, response: function (response){ var accessToken = response && response.data && response.data["access-token"] || null; if( accessToken ){ $rootScope.user.accessToken = accessToken; $rootScope.user.isLogin = true; } return response; }, responseError: function(response){ if( response.status === 401){ $rootScope.user.accessToken = null; $rootScope.user.isLogin = false; } } }; return interceptor;}]);
atcCS.filter('inputHelper', [function(){ return function(input,value){ var result = {}; if( !value ){ return input; } value = String(value).toUpperCase(); for (var i in input){ var item = input[i]; var article = item.article && String(item.article).toUpperCase() || ""; var supply = item.supply && String(item.supply).toUpperCase() || ""; if( (article.indexOf(value) > -1) || (supply.indexOf(value) > -1) ){ result[i] = item; } } return result; };}]);
/* * Модель пользователя системы */function userModel(){ return { name: 'Йожыг', surname: 'Йожыгов', company: 'ООО Йожыная ферма', markup: [ { v:15,n:'Простая'}, { v:10,n:'Сложная'} ], alerts: [ /*{head: "Добро пожаловать", text: "Добро пожаловать в нашу мега-супе-пупер-систему", style:"btn-info", new:1}, {head: "Добро пожаловать", text: "Добро пожаловать в нашу мега-супе-пупер-систему", style:"btn-info", new:1}, {head: "Добро пожаловать", text: "Добро пожаловать в нашу мега-супе-пупер-систему", style:"btn-info", new:1}, {head: "Ошибка авторизации", text: "Ошибка при авторизации", style:"btn-danger", new:1}, {head: "Ошибка авторизации", text: "Ошибка при авторизации", style:"btn-danger", new:1}, {head: "Ошибка авторизации", text: "Ошибка при авторизации", style:"btn-danger", new:1}, {head: "Ошибка авторизации", text: "Ошибка при авторизации", style:"btn-danger", new:1},*/ ], analogShow : false, isLogin : false, accessToken : false }; }
/* * Сервис для обслуживания модели пользователя и общения с сервером */atcCS.service('User',['$http', '$cookies', '$rootScope', 'Notification', function($http, $cookies, $rootScope, $notify){ var URL = "http://rest.atc58.bit/index.php"; var model = new userModel(); function URLto(controller,funct,local){ return (local?"":URL) + "?r=" + controller + "/" + funct; } function loadFormCookies(){ var name = $cookies.get('name'); var pass = $cookies.get('pass'); console.log("Login from Cookies", name, pass); if ( name && pass ){ console.log("Name:",name,"Pass:",pass); model.login(name,pass,true).then(function(){ model.update(); }); return true; } return false; }; model.login = function login(name,password,remember){ var req = { method: 'GET', url: URLto('login','login'), responseType: 'json', headers: { 'Authorization': "Basic " + btoa(name + ":" + password) }, params: { params: 'get-token' + (remember?'-hash':'') } }; return $http(req).then( function success(response){ var hash = response && response.data && response.data['hash'] || null; if( hash && remember ){ var now = new Date(); var expires = new Date( now.getTime() + 30*24*3600 ); $cookies.put('name',name,{expires:expires}); $cookies.put('pass',hash,{expires:expires}); } }, function error(response){ $notify.addItem("Ошибка","Вам не удалось авторизоваться. Проверьте правильность имени пользователя и\или пароля."); }); }; model.update = function update(){ var req = { method: 'GET', url: URLto('login','get-data'), params: { params: 'get-data' } }; if( model.isLogin === false ){ return false; } console.log("User data update"); return $http(req).then(function succes(response){ }, function error(response){ }); }; model.parseSearch = function parseSearch(text, tags){ var req = { method: 'POST', url: URLto('helper','parse-search'), responseType: 'json', params: { params: { text: text, tags: tags } } }; return $http(req); }; $rootScope.user = model; for(var index in model.alerts){ $notify.addObj(model.alerts[index]); } loadFormCookies(); return model; }]);
/* * Сервис для обслуживания модели уведомлений */atcCS.service('Notification',['$rootScope', function($rootScope){ var model = {}; model.list = []; model.addObj = function(obj){ model.list.push(obj); }; model.addItem = function(head,text,style){ if( !style ){ style = "btn-info"; } model.list.push({head:head,text:text,style:style, new:1}); }; return model;}]);
/* * Сервис для обслуживания модели уведомлений */atcCS.service('searchControl', function(){ var $model = { root: null, input: null, tagsField: null, iconsField: null, tags: { }, inputPauseCallback: null, pauseTimer: null }; var $this = this; function clearTags(){ $($model.tagsField).html(""); }; function createTag($type, $text){ var close_icon = $('<span class="glyphicon glyphicon-remove"></span>'); var icon = $('<span></span>'); icon.text($text); icon.attr('type',$type); icon.attr('key',$text); icon.addClass("icon-" + $type); icon.append(close_icon); return icon; }; function updateInput(){ var paddingWidth = $($model.tagsField).width(); $($model.input).css({ 'padding-left': paddingWidth + 20 }); }; function inputTimeout(immediately){ if( !$model.inputPauseCallback ){ return; } var text = $($model.input).val(); $model.inputPauseCallback(text,immediately); }; function inputKeyDown($event){ clearTimeout($model.pauseTimer); $model.pauseTimer = null; if( $event.keyCode === 13){ inputTimeout(true); $event.stopPropagation(); return false; } return true; }; function inputKeyUp(){ if( $model.pauseTimer ){ clearTimeout($model.pauseTimer); } $model.pauseTimer = setTimeout(inputTimeout,500); }; $model.pushTag = function ($type, $tag, $ids){ if( !$model.tags[$type] ){ $model.tags[$type] = {}; } $model.tags[$type][$tag] = $ids; }; $model.removeTag = function ($type, $tag){ $model.tags.$type.$tag = null; }; $model.updateTags = function updateTags(){ clearTags(); for(var $type in $model.tags){ var tags = $model.tags[$type]; for(var $tag in tags){ if( tags[$tag] !== null){ $($model.tagsField).append(createTag($type,$tag)); } } } updateInput(); }; $model.init = function init($root, $onInputPause){ $model.root = $root; $model.input = $($root).find('input'); $model.tagsField = $($root).find('div.tag-icons'); $model.iconsField = $($root).find('div.search-icons'); $model.inputPauseCallback = ($onInputPause instanceof Function)?$onInputPause:null; $($model.input).keydown(inputKeyDown); $($model.input).keyup(inputKeyUp); }; return $model;} );
